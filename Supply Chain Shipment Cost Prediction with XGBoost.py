# -*- coding: utf-8 -*-
"""capstone code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wLf80geyuPhIIukc5w_E6oDoM-_Luu0G

***Step 1: Setup and Libraries***
"""

# Install necessary libraries
!pip install pandas numpy scikit-learn xgboost shap matplotlib seaborn geneticalgorithm streamlit joblib fastapi uvicorn optuna lime tensorflow
!pip install -U xgboost
!pip install --upgrade xgboost
!pip install xgboost==1.6.1

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from xgboost import XGBRegressor
import optuna
from lime.lime_tabular import LimeTabularExplainer
from sklearn.linear_model import LinearRegression
import shap
import tensorflow as tf
import xgboost
print(xgboost.__version__)

# Set up visualizations
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 8)

"""***Step 2: Load and Clean Dataset***"""

# Load dataset
df = pd.read_csv('/content/Supply_Chain_Shipment_Pricing_Dataset.csv')

# Clean column names
df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")

# Preview data
print("Columns:", df.columns.tolist())
print(df.head(2))

"""***Step 3: Handle Date Columns***"""

# Convert relevant date columns to datetime format if they exist
date_cols = ['pq_first_sent_to_client_date', 'po_sent_to_vendor_date', 'scheduled_delivery_date',
             'delivered_to_client_date', 'delivery_recorded_date']
for col in date_cols:
    if col in df.columns:  # Check if the column exists
        df[col] = pd.to_datetime(df[col], format='%Y-%m-%d', errors='coerce')
    else:
        print(f"Warning: Column '{col}' does not exist in the DataFrame.")

"""***Step 4: Handle Numeric Columns and Missing Values***"""

# Convert to numeric and handle missing values
df['freight_cost_(usd)'] = pd.to_numeric(df['freight_cost_(usd)'], errors='coerce')
df['line_item_insurance_(usd)'] = pd.to_numeric(df['line_item_insurance_(usd)'], errors='coerce')

# Fill missing values
numeric_cols = df.select_dtypes(include=['number']).columns
df[numeric_cols] = df[numeric_cols].interpolate(method='linear')

# Create new feature 'total_cost'
if 'freight_cost_(usd)' in df.columns and 'line_item_insurance_(usd)' in df.columns:
    df['total_cost'] = df['freight_cost_(usd)'] + df['line_item_insurance_(usd)']
else:
    print("Warning: Columns for total cost calculation are missing.")

"""***Step 5: Exploratory Data Analysis and Scaling***"""

# Display basic data information
print("Data Info:")
print(df.info())

# Display descriptive statistics
print("\nDescriptive Statistics:")
print(df.describe())

# Missing value check
print("\nMissing Values:")
print(df.isnull().sum())

# Select numeric columns for correlation analysis
numeric_columns = ['line_item_quantity', 'weight_(kilograms)', 'total_cost', 'freight_cost_(usd)']
for col in numeric_columns:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Drop rows with missing values
df.dropna(subset=numeric_columns, inplace=True)

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df[numeric_columns].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Pairplot for numerical features
sns.pairplot(df[numeric_columns])
plt.suptitle("Pairplot of Numeric Features", y=1.02)
plt.show()

# Histograms
df[numeric_columns].hist(bins=30, figsize=(12, 10))
plt.suptitle("Histograms of Numeric Features")
plt.show()

# Boxplots for outliers
plt.figure(figsize=(12, 8))
for i, col in enumerate(numeric_columns):
    plt.subplot(2, 2, i + 1)
    sns.boxplot(y=df[col])
    plt.title(f'Boxplot of {col}')
plt.tight_layout()
plt.show()

"""***Step 6: Data Scaling***"""

scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[['line_item_quantity', 'total_cost', 'freight_cost_(usd)']])
df_scaled = pd.DataFrame(scaled_features, columns=['line_item_quantity', 'total_cost', 'freight_cost_(usd)'])

"""***Step 7: Predictive Modeling with XGBoost***"""

# Define features and target
X = df_scaled.drop('freight_cost_(usd)', axis=1)  # Features
y = df['freight_cost_(usd)']  # Target variable

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Optuna optimization function for XGBoost
def objective(trial):
    param = {
        'n_estimators': trial.suggest_int('n_estimators', 100, 500),
        'max_depth': trial.suggest_int('max_depth', 3, 10),
        'learning_rate': trial.suggest_float('learning_rate', 1e-4, 1e-1, log=True),
        'subsample': trial.suggest_float('subsample', 0.5, 1.0),
        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.5, 1.0)
    }
    xgb_model = XGBRegressor(objective='reg:squarederror', **param)
    xgb_model.fit(X_train, y_train)
    y_pred = xgb_model.predict(X_test)
    return np.sqrt(mean_squared_error(y_test, y_pred))

# Run optimization
study = optuna.create_study(direction='minimize')
study.optimize(objective, n_trials=50)
print("Best parameters:", study.best_params)

# Train XGBoost with best parameters
xgb_reg = XGBRegressor(objective='reg:squarederror', **study.best_params)
xgb_reg.fit(X_train, y_train)
y_pred_xgb = xgb_reg.predict(X_test)

# Evaluate XGBoost
rmse_xgb = np.sqrt(mean_squared_error(y_test, y_pred_xgb))
r2_xgb = r2_score(y_test, y_pred_xgb)
print(f'XGBoost Performance:\nRMSE: {rmse_xgb}, R^2 Score: {r2_xgb}')

"""***Step 8: Model Evaluation***"""

# Evaluate model performance
mae = mean_absolute_error(y_test, y_pred_xgb)
print(f"XGBoost Results")
print(f'Root Mean Squared Error (RMSE): {rmse_xgb}')
print(f'R^2 Score: {r2_xgb}')

"""***Linear Regression***"""

# Train Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predictions and Evaluation
y_pred_lr = lr_model.predict(X_test)
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))
r2_lr = r2_score(y_test, y_pred_lr)
print(f"Linear Regression Performance:\nRMSE: {rmse_lr}")
print(f"R^2 Score: {r2_lr}")

"""***Step 8: Model Comparison and Visualization***"""

# Comparison plot for RMSE and R^2 scores
models = ['XGBoost', 'Linear Regression']
rmse_values = [rmse_xgb, rmse_lr]
r2_values = [r2_xgb, r2_lr]

# Plotting
fig, ax1 = plt.subplots()

ax2 = ax1.twinx()
ax1.bar(models, rmse_values, color='g', alpha=0.6, label='RMSE')
ax2.plot(models, r2_values, color='b', marker='o', label='R2 Score')

ax1.set_xlabel('Models')
ax1.set_ylabel('RMSE', color='g')
ax2.set_ylabel('R2 Score', color='b')
plt.title("Model Performance Comparison")
ax1.legend(loc='upper left')
ax2.legend(loc='upper right')
plt.show()

"""**Conclusion:**
Both models performed exceptionally well, but XGBoost's robustness in handling non-linear relationships makes it ideal for complex datasets, while Linear Regression provides a simpler, interpretable approach with slightly better accuracy in this dataset.

"""